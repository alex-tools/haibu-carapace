#!/usr/bin/env node

var path = require('path'),
    _send = process.send || function(){},
    async = require('async'),
    drone = require('../lib/drone');

//
// Extract the drone CLI arguments for this
// process.
//
var argv = drone.cli.argv();
drone.script = argv._[0];

function onPluginError (info) {
  //
  // If any of the plugins have failed to load then short
  // circuit this drone process because it requested them all.
  //
  console.log('Error loading plugin: ' + info.plugin);
  console.log(info.error.message);
  console.dir(info.error.stack.split('\n'));
  process.exit(1);
}

//
// Setup the passthru arguments.
//
drone.argv = drone.cli.extract(null, drone.script);

function configure (next) {
  if (!Array.isArray(argv.plugin)) {
    argv.plugin = [argv.plugin];
  }

  //
  // Listen for errors when loading plugins
  //
  drone.on('plugin::error', onPluginError);

  var plugins = argv.plugin.map(function (plugin) {
    return drone.load(plugin);
  });

  drone.use(plugins, function () {
    var names = argv.plugin.map(function (plugin) {
      return path.basename(plugin, '.js');
    });

    async.forEachSeries(names, function (plugin, next) {
      if (!drone[plugin]) {
        return onPluginError({
          plugin: plugin,
          error: new Error('No plugin `' + plugin + '` was found after loading.')
        });
      }

      drone[plugin](argv[plugin], function (err) {
        return !err ? next() : onPluginError({
          plugin: plugin,
          error: err
        });
      });
    }, next);
  });
}

function runAndReport () {
  drone.run(drone.script, true, function (err) {

    if (err) {
      console.log(err);
      process.exit();
    }
    _send.call(process, 'drone has wrapped: ' + drone.script);

    console.log('> drone ' + process.pid +  ' has wrapped: ' + drone.script);

    function logArray (array, msg, delim) {
      return array && array.length
        ? _send.call(process, msg + array.join(delim))
        : null;
    }

    logArray(drone.argv, 'with arguments: ', ' ');
    logArray(Object.keys(drone._module.exports), '  and exports: ', ', ');
  });
}

return argv.plugin
  ? configure(runAndReport)
  : runAndReport();

