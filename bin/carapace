#!/usr/local/bin/node
//
// Carapace.js
//
// Setup and bidirectional communication environment for processes
//

var path = require('path');
var fs = require('fs');
var net = require('net');
var EventEmitter = require('events').EventEmitter;
var dnode = require('dnode');
//
// Carapace arguments are for the rooting environment
//  * carapace.bridge
//
var bridgePath = process.argv.splice(2,1)[0];
var bridgeServer = net.createServer();
bridgeServer.listen(bridgePath);
//
// ghetto hookio shim until we iron out some domain socket bugs
//
var carapace = new EventEmitter();

var bridge = new dnode({
  emit: function() {
    //
    // DO NOT STIP OFF THE ASYNC CALLBACK ON THE END
    //
    carapace.emit.apply(carapace,arguments);
  }
});
bridge.listen(bridgeServer);

carapace.on('plugin',function(toRequire, done) {
  try {
    require(toRequire)(carapace);
  }
  catch(e) {
    if(done) return done(e);
  }
  if(done) return done();
  return undefined;
});
var running = false;
carapace.on('run', function(script, done) {
  if(running) {
    if(done) return done('Cannot spawn a new script, one is already running.');
    return undefined;
  }
  running = true;
  process.argv.splice(1,1,fs.realpathSync(require.resolve(path.join(process.cwd(),script))));
  require('module').Module._cache = {};
  //
  // Next tick to prevent a leak from arguments
  //
  return process.nextTick(function(){require('module').Module.runMain()});
});
